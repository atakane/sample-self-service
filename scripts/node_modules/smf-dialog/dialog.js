/* globals*/
(function() {
    /**
     * Creates a new dialog. Add new controls using overlay.add method
     * @constructor
     * @param {Object} options optional dialog options
     * @param {Object} options.background rectangle constructor options, optional
     * @param {Object} options.overlay container constructor options, optional
     */
    function Dialog(options) {
        if (!(this instanceof Dialog)) {
            var args = Array.prototype.slice.call(arguments, 1);
            var Temp = function() {},
                inst, ret;
            Temp.prototype = Dialog.prototype;
            inst = new Temp;
            ret = Dialog.apply(inst, args);
            return Object(ret) === ret ? ret : inst;
        }

        options = options || {};

        var cntAll = new SMF.UI.Container({
            top: 0,
            left: 0,
            height: Device.screenHeight,
            width: Device.screenWidth,
            borderWidth: 0,
            backgroundTransparent: true
        });

        var rectBg = this.background = new SMF.UI.Rectangle(Object.assign({
            alpha: 0.8,
            top: 0,
            left: 0,
            height: "100%",
            width: "100%",
            borderWidth: 0,
            backgroundTransparent: false,
            fillColor: "#000000",
            roundedEdge: 1,
            onTouchEnded: function(e) {
                //me.hide();
            }
        }, options.background));
        cntAll.add(rectBg);

        /**
         * shows the dialog on page
         * @param {SMF.UI.Page} page optional
         */
        this.show = function show(page) {
            page = page || Pages.currentPage;
            if (cntAll.parent !== page)
                Dialog.removeWait(page);
            page.add(cntAll);
            page.old_onKeyPress = page.onKeyPress;
            page.onKeyPress = nothing;
            page.actionBar && (page.actionBar._enabled = page.actionBar.enabled);
            page.navigationItem && (page.navigationItem._enabled = page.navigationItem.enabled);
            page.actionBar && (page.actionBar.enabled = false);
            page.navigationItem && (page.navigationItem.enabled = false);
            cntAll.visible = false; //bug COR-1033
            cntAll.visible = true;
        };

        
        this.hide = function hide() {
            var parent = cntAll.parent;
            if (parent) {
                parent.remove(cntAll);
                if (parent.old_onKeyPress) {
                    parent.onKeyPress = parent.old_onKeyPress;
                    parent.old_onKeyPress = null;
                }
                parent.actionBar && (parent.actionBar.enabled = parent.actionBar._enabled);
                parent.navigationItem && (parent.navigationItem.enabled = parent.navigationItem._enabled);
            }

        };

        var overlayKeys = Object.assign({
            top: "15%",
            left: "30%",
            height: "70%",
            width: "40%",
            backgroundTransparent: false,
            fillColor: "#FFFFFF",
            borderWidth: 1,
            borderColor: "#000000",
            z: 10
        }, options.overlay);
        this.overlay = new SMF.UI.Container(overlayKeys);
        cntAll.add(this.overlay);

    }

    if (typeof module === "undefined")
        global.Dialog = Dialog;
    else
        module.exports = Dialog;
    var waitDialogBackgroundOptions = {
        top: "41%",
        left: "16.66666%",
        height: "22.4887%",
        width: "66.66668%",

    };
    var waitDialogOverlayOptions = {
        width: "100%",
        height: "100%",
        top: 0,
        left: 0,
        backgroundTransparent: true
    };

    function waitDialogOnShow() {
        Object.assign(waitDialog.overlay, waitDialogOverlayOptions);
        Object.assign(waitDialog.background, waitDialogBackgroundOptions);
        waitActivityIndicator.top = (waitActivityIndicator.parent.height - waitActivityIndicator.height) / 2;
        waitActivityIndicator.left = (waitActivityIndicator.parent.width - waitActivityIndicator.width) / 2;
    }
    var waitDialog = new Dialog({
        overlay: Object.assign({
            onShow: waitDialogOnShow
        }, waitDialogOverlayOptions),
        background: waitDialogBackgroundOptions
    });

    var waitActivityIndicator = new SMF.UI.ActivityIndicator({
        style: SMF.UI.ActivityIndicatorStyle.WHITELARGE
    });
    waitActivityIndicator.z = 10;
    waitDialog.overlay.add(waitActivityIndicator);

    /**
     * Shows wait dialog that blocks interaction
     */
    Dialog.showWait = function showWait(page) {
        waitDialog.show(page);
    };

    function nothing() {}
    
    /**
     * Removes/hides wait dialog
     *
     */
    Dialog.removeWait = function removeWait() {
        waitDialog.hide();
    };

})();
